// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebAPI.Models;

namespace WebAPI.Data
{
    public partial class Yacht_DbContext : DbContext
    {
        public Yacht_DbContext()
        {
        }

        public Yacht_DbContext(DbContextOptions<Yacht_DbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Yacht> Yachts { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_ID");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FirstName).HasMaxLength(100);

                entity.Property(e => e.LastName).HasMaxLength(100);

                entity.Property(e => e.License).HasMaxLength(100);

                entity.Property(e => e.TeleNr)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId).HasColumnName("Order_ID");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_ID");

                entity.Property(e => e.DropoffDate)
                    .HasColumnType("date")
                    .HasColumnName("Dropoff_date");

                entity.Property(e => e.PickupDate)
                    .HasColumnType("date")
                    .HasColumnName("Pickup_date");

                entity.Property(e => e.TotalPrice).HasColumnName("Total_price");

                entity.Property(e => e.YachtId).HasColumnName("Yacht_ID");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Orders_Customer");

                entity.HasOne(d => d.Yacht)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.YachtId)
                    .HasConstraintName("FK_Orders_Yacht");
            });

            modelBuilder.Entity<Yacht>(entity =>
            {
                entity.ToTable("Yacht");

                entity.Property(e => e.YachtId).HasColumnName("Yacht_ID");

                entity.Property(e => e.RentalPrice).HasColumnName("Rental_price");

                entity.Property(e => e.YachtName)
                    .HasMaxLength(100)
                    .HasColumnName("Yacht_name");

                entity.Property(e => e.YachtType)
                    .HasMaxLength(100)
                    .HasColumnName("Yacht_type");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}